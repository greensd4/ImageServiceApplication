Index: app/src/main/java/com/example/green/imageserviceapp/TcpClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.green.imageserviceapp;\n\nimport android.util.Log;\n\nimport java.io.BufferedWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class TcpClient {\n    private int port;\n    private String ip;\n    private Socket socket;\n    private final static Lock mutex = new ReentrantLock(true);\n    //private File fileToSend;\n\n    public TcpClient(int port, String ip)throws Exception{\n        this.port = port;\n        this.ip = ip;\n        createNewConnection();\n    }\n    private void createNewConnection() throws Exception{\n//        new Thread(new Runnable() {\n//            @Override\n//            public void run() {\n                InetAddress serverAddr;\n                try {\n                    try{\n                        //here you must put your computer's IP address.\n                        serverAddr = InetAddress.getByName(this.ip);\n                    }catch (Exception e) {\n                        Log.e(\"TCP\", \"ADD: Error\", e);\n                        return;\n                    }\n                    Log.d(\"TCP Client\", \"M: Connecting...\");\n                    //create a socket to make the connection with the server\n                    socket = new Socket(serverAddr, this.port);\n                    //mBufferOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);\n                } catch (Exception e) {\n                    Log.e(\"TCP\", \"Socket: Error\", e);\n                }\n           // }\n        //}).start();\n    }\n    public void disconnect(){\n        try {\n            socket.close();\n        }catch (Exception e){\n            Log.e(\"TCP\", \"Socket: Error\", e);\n        }\n    }\n    public void sendFile(final File file) throws Exception{\n        final File f = file;\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Log.d(\"TCP Client\", \"M: Sending a file...\" +f.getName());\n                    PrintWriter output = new PrintWriter(socket.getOutputStream());\n                    InputStream input = socket.getInputStream();\n                    String nameOfFile = f.getName();\n                    byte[] byteFile = getFileByBytes(f);\n                    String[] args = createArgs(byteFile,nameOfFile);\n                    //creating a new CommandRecievedEventArgs object\n                    CommandRecievedEventArgs crea = new CommandRecievedEventArgs(7,args,null);\n                    //cast CommandRecievedEventArgs into JSon\n                    String commandString = crea.toJson();\n                    //send Command to service.\n                    mutex.lock();\n                    output.print(commandString);\n                    output.flush();\n                    mutex.unlock();\n                    //output.close();\n                } catch (Exception e) {\n                    Log.e(\"TCP\", \"C: Error\", e);\n                }\n            }\n        });\n    }\n    private byte[] getFileByBytes(File file) throws Exception{\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        FileInputStream fis = new FileInputStream(file);\n        int i;\n        while ((i = fis.read(buffer)) != -1) {\n            stream.write(buffer, 0, i);\n        }\n        return stream.toByteArray();\n    }\n\n    private String[] createArgs(byte[] imageAsBytes, String imageName) {\n        String[] args = new String[2];\n        String s = new String(imageAsBytes);\n        args[0] = s;\n        args[1] = imageName;\n        return args;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/green/imageserviceapp/TcpClient.java	(revision b52270b4500b14654322edd35ffb161efaef7a78)
+++ app/src/main/java/com/example/green/imageserviceapp/TcpClient.java	(date 1529568133959)
@@ -4,6 +4,7 @@
 
 import java.io.BufferedWriter;
 import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
@@ -66,6 +67,7 @@
                     Log.d("TCP Client", "M: Sending a file..." +f.getName());
                     PrintWriter output = new PrintWriter(socket.getOutputStream());
                     InputStream input = socket.getInputStream();
+                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                     String nameOfFile = f.getName();
                     byte[] byteFile = getFileByBytes(f);
                     String[] args = createArgs(byteFile,nameOfFile);
@@ -75,8 +77,7 @@
                     String commandString = crea.toJson();
                     //send Command to service.
                     mutex.lock();
-                    output.print(commandString);
-                    output.flush();
+                    dos.write(commandString.getBytes(), 0, commandString.length());
                     mutex.unlock();
                     //output.close();
                 } catch (Exception e) {
